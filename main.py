  
'''
using discord.py version 1.0.0a
'''
import discord
import asyncio
import re
import multiprocessing
import threading
import concurrent

#BOT_OWNER_ROLE = 'Runner' # change to what you need
#BOT_OWNER_ROLE_ID = "503197827556704268" 
  
g="https://discord.gg/qNNBVDq" 

 
oot_channel_id_list = [
"766263480139382794", #egle
"766262525540302868", #addicted 
"766262457999687700", #glxy
"766262588924362783", #viper
"759803138043281448", #anurag
"759850165317664768", #challenge
"760115705617055764", #trivia bot 
"758208916596457492","761311278571847740","758208917464940555","761034884943708160", "762884144169615370","744739870089543722","731698635842125884","732405414901317752","744852125904797746","742297813211283567","744453814223896597","744453814853304341","744453815620862022","744453816140824649","747114653464658031","747114654383472741","738576766116823110","738576678065799230","739555941325996162","736540378001440819","731059238507380756","731059312927178752","742646190587248771","742645972945076234","742645895723483226","724831091650723890","732261865325068421","745604433869537310","745604174615674892","739488966419677215","745604368740384808","743338043704082452","738938994292817970","743338124746293309","743289428218347571","745280280608374824","732528577689550878","732405414901317752","732405971611287552","740244597933867038",
"700099690636640286","744515992574492672","734734911650529340","734734974594318366","735434573533675601","745169343762121156123557888","744852125904797746","744739870089543722","731698635842125884","732405414901317752","744852125904797746","742297813211283567","744453814223896597","744453814853304341","744453815620862022","744453816140824649","747114653464658031","747114654383472741","738576766116823110","738576678065799230","739555941325996162","736540378001440819","731059238507380756","731059312927178752","742646190587248771","742645972945076234","742645895723483226","724831091650723890","732261865325068421","745604433869537310","745604174615674892","739488966419677215","745604368740384808","743338043704082452","738938994292817970","743338124746293309","743289428218347571","745280280608374824","732528577689550878","732405414901317752","732405971611287552","740244597933867038",
"700099690636640286","744515992574492672","734734911650529340","734734974594318366","735434573533675601","745169343566053498","735050837814149131","735234693175181364","735912993706999959","740581333788786818","740581407205752873","740581333788786818","739816159213387857","739816299198152776","736889448888795246","740258151642955876","736889487761735732","736889662882447401","736889401480708188","744526373883871382","746651827092586516","746704484842864722","741493160521367552","568617830258442255","570794448808837131","678068434449203212","733232237482475581","733232243455164436","733232241680973855","745240612160405564","746451572132806764","745465606219890700","745821737362391141","743059378743148555","743059900900573185","743059378743148555","744739870089543722","744950513178509523","746560364266913973","746560142320861214","746560834217705574","746559878012862575","746560210562187297",
"566053498","735050837814149131","735234693175181364","735912993706999959","740581333788786818","740581407205752873","740581333788786818","739816159213387857","739816299198152776","736889448888795246","740258151642955876","736889487761735732","736889662882447401","736889401480708188","744526373883871382","746651827092586516","746704484842864722","741493160521367552","568617830258442255","570794448808837131","678068434449203212","733232237482475581","733232243455164436","733232241680973855","745240612160405564","746451572132806764","745465606219890700","745821737362391141","743059378743148555","743059900900573185","743059378743148555","744739870089543722","744950513278509523","746560364266913973","746560142320861214","746560834217705574","746559878012862575","746560210562187297",
"57888","744852125904797746","744739870089543722","731698635842125884",
"764305658224050176","753322033181491235",
"765313766128484372","722080589997539368",
"765313684137967638","721373604247371797","721890235444887573","721374456701911170",
"765313600108888123","721374335146917898","722408230873202788","721374498758328321",
"708933760695009321","727152893160980480",
"725143647032705095 ","698434631636090950",
"760555743556141077","760557729252114503",
"727115891204030576","760557826359296020",
"761259151669198879","695017173554429955",
"695944096002342942","695944240345382952",
"767746145539457047","762121156123557888","761580617686712320","761589478656573490","748332045306167357","760555743556141077","760557729252114503","760557826359296020","761259151669198879","764746032994189312",
"762121156123557888","761580617686712320","761589478656573490","748332045306167357","760555743556141077","760557729252114503","760557826359296020","761259151669198879","764746032994189312",

"762602930133925889","735331245235503217","747429914017398795","747430195132235817","747430684322299928","759803138043281448","759850165317664768","760115705617055764","762842429459398708",

"766262457999687700","766263480139382794","759336052233207818","761159080424898570","766365877028913152","765313600108888123","765313684137967638","765313766128484372","765313861023957063"
"762602930133925889","735331245235503217","747429914017398795","747430195132235817","747430684322299928","759803138043281448","759850165317664768","760115705617055764","762842429459398708",

"766262457999687700","766263480139382794","759336052233207818","761159080424898570","766365877028913152","765313600108888123","765313684137967638","765313766128484372","765313861023957063",
"726974785250263113",
"693960182803333150","722080589997539368",
"708933852365586472","721373604247371797","721890235444887573","721374456701911170",
"709105854473044049","721374335146917898","722408230873202788","721374498758328321",
"708933760695009321","727152893160980480",
"725143647032705095 ","698434631636090950",
"726257532494020659 ","723526231471161445",
"727115891204030576","712203364284498041",
"725010542254620683","691011674181992518",
"725144221484580904","708146834752929813",
"459842150323060736","719862214370263120",
"726974785250263113",
"693960182803333150",
"689311945345859795",
"727115801496125441 ",
"714446952586280992 ",
"708933957269454868",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898", "722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"459842150323060736",
"691011674181992518" ,
    "721374335146917898","708933760695009321" #swagiq ,
    #pride
    "708933760695009321","708933760695009321","708933760695009321","723088743493533727",
"723087879852785684",
"723088839740227614" ,"723088743493533727",
"723088839740227614",
"723087879852785684",
"723087776488226867",
"723087669873344522",
"723087621919604797","722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"459842150323060736","724601176292720710",
"724601624806424676",
"724426470390497280",
"724601333952544868",
"724601425706876928",
"724581276396552282",
"724601176292720710",
"724558929677385840",
"724581276396552282",
"722705945532039199",
"722706935580983386",
"711965357975535657",
"708674145340227634",
"708933957269454868",
"691011674181992518",
"722417157811601516", "709105854473044049" , "708939482405273650", "708939395323133972", "708933852365586472", "713398517544255599" ,"709683027009339424","714065739954520084",	"595639586726740049"	,"591068955523809328"	,"580198028950896640","459842150323060736","513818250652680213" ,"569420198717816852","568617830258442255",
    "718825437710516304", "718040375230595113","708146834752929813","713349059259400243","459842150323060736","716868759490527314","691011674181992518","693960182803333150","689311945345859795","695776240199794739","695775976327610498","714446952586280992","698434631636090950","717932695744937984","717924977692901436","718193072923476018","716868750376435724","718289931767775253","710823260773810286","709105854473044049","705421948171190343","707120277196242995","459842150323060736","516800236941869076","718681472936181792","700663849875144816","700663991671717939","700664433793302578","700664863525175346","700664827323875398", "694528602586480722", "694528602586480722", "694528602586480722", "681891490208677958", "693960182803333150", "693960182803333150", "693960182803333150", "568617830258442255", "568617830258442255", "570794448808837131", "570794448808837131", "689311945345859795", "689311945345859795", "689311945345859795", "694084730022264852", "694084730022264852", "686419613898113092", "686419613898113092","714063807722422333","708933852365586472","711043327960678453","708933957269454868","712373748287930388","708939482405273650","713398517544255599","720993786511228928","721353316264706100" ,"708933852365586472","721354709562294382" ,"721347821403635713","721354761441509457","709105854473044049" ,"721354939842035752", "708933957269454868" ,"708933760695009321","721347821403635713","721354939842035752", "708933957269454868"  ,"721354761441509457","709105854473044049" ,"708933852365586472","721354709562294382" ,"720993786511228928","721353316264706100",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"691011674181992518",
"689311945345859795",
"727115801496125441 ",
"714446952586280992 ",
"708933957269454868",
"721373604247371797", "722080589997539368",
"708933852365586472","721373604247371797","721890235444887573","721374456701911170",
"709105854473044049","721374335146917898","722408230873202788","721374498758328321",
"708933760695009321","727152893160980480",
"725143647032705095 ","698434631636090950",
"726257532494020659 ","723526231471161445",
"727115891204030576","712203364284498041",
"725010542254620683","691011674181992518",
"725144221484580904","708146834752929813",
"459842150323060736","719862214370263120",
"726974785250263113",
"693960182803333150",
"689311945345859795",
"727115801496125441 ",
"714446952586280992 ",
"708933957269454868",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898", "722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"459842150323060736",
"691011674181992518" ,
    "721374335146917898","708933760695009321" #swagiq ,
    #pride
    "708933760695009321","708933760695009321","708933760695009321","723088743493533727",
"723087879852785684",
"723088839740227614" ,"723088743493533727",
"723088839740227614",
"723087879852785684",
"723087776488226867",
"723087669873344522",
"723087621919604797","722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"459842150323060736","724601176292720710",
"724601624806424676",
"724426470390497280",
"724601333952544868",
"724601425706876928",
"724581276396552282",
"724601176292720710",
"724558929677385840",
"724581276396552282",
"722705945532039199",
"722706935580983386",
"711965357975535657",
"708674145340227634",
"708933957269454868",
"691011674181992518",
"722417157811601516", "709105854473044049" , "708939482405273650", "708939395323133972", "708933852365586472", "713398517544255599" ,"709683027009339424","714065739954520084",	"595639586726740049"	,"591068955523809328"	,"580198028950896640","459842150323060736","513818250652680213" ,"569420198717816852","568617830258442255",
    "718825437710516304", "718040375230595113","708146834752929813","713349059259400243","459842150323060736","716868759490527314","691011674181992518","693960182803333150","689311945345859795","695776240199794739","695775976327610498","714446952586280992","698434631636090950","717932695744937984","717924977692901436","718193072923476018","716868750376435724","718289931767775253","710823260773810286","709105854473044049","705421948171190343","707120277196242995","459842150323060736","516800236941869076","718681472936181792","700663849875144816","700663991671717939","700664433793302578","700664863525175346","700664827323875398", "694528602586480722", "694528602586480722", "694528602586480722", "681891490208677958", "693960182803333150", "693960182803333150", "693960182803333150", "568617830258442255", "568617830258442255", "570794448808837131", "570794448808837131", "689311945345859795", "689311945345859795", "689311945345859795", "694084730022264852", "694084730022264852", "686419613898113092", "686419613898113092","714063807722422333","708933852365586472","711043327960678453","708933957269454868","712373748287930388","708939482405273650","713398517544255599","720993786511228928","721353316264706100" ,"708933852365586472","721354709562294382" ,"721347821403635713","721354761441509457","709105854473044049" ,"721354939842035752", "708933957269454868" ,"708933760695009321","721347821403635713","721354939842035752", "708933957269454868"  ,"721354761441509457","709105854473044049" ,"708933852365586472","721354709562294382" ,"720993786511228928","721353316264706100",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"691011674181992518" ,

"721373676553109524",
"721890235444887573",
"721374335146917898", "722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170","709105854473044049",
"722046175699796058",
"721374498758328321",
"459842150323060736",
"691011674181992518" ,
    "721374335146917898","708933760695009321" #swagiq ,
    #pride
    "708933760695009321","708933760695009321","708933760695009321","723088743493533727",
"723087879852785684",
"723088839740227614" ,"723088743493533727",
"723088839740227614",
"723087879852785684",
"723087776488226867",
"723087669873344522",
"723087621919604797","722080589997539368",
"708933852365586472","723088743493533727",
"723088839740227614","723877595560804372",
"723087879852785684","722080589997539368",
"709105854473044049",
"708933760695009321","722417080485412955",
"708933957269454868","721373604247371797",
"721373604247371797",
"721373676553109524",
"721890235444887573",
"721374335146917898",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"459842150323060736","724601176292720710",
"724601624806424676",
"724426470390497280",
"724601333952544868",
"724601425706876928",
"724581276396552282",
"724601176292720710",
"724558929677385840",
"724581276396552282","725596647115063356","729236496183328768",
"722705945532039199","731550070209642619","729236540630499399",
"722706935580983386","732405726252630026","729917217520746506","730596073109848065",
"711965357975535657","732405414901317752","732198930003001374","730635786348658738",
"708674145340227634","732405971611287552","730637418537156699","732199075687956551",
"708933957269454868",
"691011674181992518",
"722417157811601516", "709105854473044049" , "708939482405273650", "708939395323133972", "708933852365586472", "713398517544255599" ,"709683027009339424","714065739954520084",	"595639586726740049"	,"591068955523809328"	,"580198028950896640","459842150323060736","513818250652680213" ,"569420198717816852","568617830258442255",
    "718825437710516304", "718040375230595113","708146834752929813","713349059259400243","459842150323060736","716868759490527314","691011674181992518","693960182803333150","689311945345859795","695776240199794739","695775976327610498","714446952586280992","698434631636090950","717932695744937984","717924977692901436","718193072923476018","716868750376435724","718289931767775253","710823260773810286","709105854473044049","705421948171190343","707120277196242995","459842150323060736","516800236941869076","718681472936181792","700663849875144816","700663991671717939","700664433793302578","700664863525175346","700664827323875398", "694528602586480722", "694528602586480722", "694528602586480722", "681891490208677958", "693960182803333150", "693960182803333150", "693960182803333150", "568617830258442255", "568617830258442255", "570794448808837131", "570794448808837131", "689311945345859795", "689311945345859795", "689311945345859795", "694084730022264852", "694084730022264852", "686419613898113092", "686419613898113092","714063807722422333","708933852365586472","711043327960678453","708933957269454868","712373748287930388","708939482405273650","713398517544255599","720993786511228928","721353316264706100" ,"708933852365586472","721354709562294382" ,"721347821403635713","721354761441509457","709105854473044049" ,"721354939842035752", "708933957269454868" ,"708933760695009321","721347821403635713","721354939842035752", "708933957269454868"  ,"721354761441509457","709105854473044049" ,"708933852365586472","721354709562294382" ,"720993786511228928","721353316264706100",
"721374456701911170",
"722046175699796058",
"721374498758328321",
"691011674181992518" ,
"693960182803333150","620472229846712371","694093289317597265","695994325938733138","694353173409824813","568617830258442255","693960182803333150","568617830258442255","694137428214022204","709231606430171196"]



answer_pattern = re.compile(r'(not|n)?([1-3]{1})(\?)?(cnf)?(\?)?$', re.IGNORECASE)

apgscore = 83
nomarkscore = 33
markscore = 13

async def update_scores(content, answer_scores):
    global answer_pattern

    m = answer_pattern.match(content)
    if m is None:
        return False

    ind = int(m[2])-1

    if m[1] is None:
        if m[3] is None:
            if m[4] is None:
                answer_scores[ind] += nomarkscore
            else: # apg
                if m[5] is None:
                    answer_scores[ind] += apgscore
                else:
                    answer_scores[ind] += markscore

        else: # 1? ...
            answer_scores[ind] += markscore

    else: # contains not or n
        if m[3] is None:
            answer_scores[ind] -= nomarkscore
        else:
            answer_scores[ind] -= markscore

    return True

class SelfBot(discord.Client):

    def __init__(self, update_event, answer_scores):
        super().__init__()
        global oot_channel_id_list
        #global wrong
        self.oot_channel_id_list = oot_channel_id_list
        self.update_event = update_event
        self.answer_scores = answer_scores

    async def on_ready(self):
        print("======================")
        print("🎭Trivia H@çks||Official🎭")
        print("Connected to discord.")
        print("User: " + self.user.name)
        print("ID: " + str(self.user.id))

    # @bot.event
    # async def on_message(message):
    #    if message.content.startswith('-debug'):
    #         await message.channel.send('d')

        def is_scores_updated(message):
            if message.guild == None or \
                str(message.channel.id) not in self.oot_channel_id_list:
                return False

            content = message.content.replace(' ', '').replace("'", "")
            m = answer_pattern.match(content)
            if m is None:
                return False

            ind = int(m[2])-1

            if m[1] is None:
                if m[3] is None:
                    if m[4] is None:
                        self.answer_scores[ind] += nomarkscore
                    else: # apg
                        if m[5] is None:
                            self.answer_scores[ind] += apgscore
                        else:
                            self.answer_scores[ind] += markscore

                else: # 1? ...
                    self.answer_scores[ind] += markscore

            else: # contains not or n
                if m[3] is None:
                    self.answer_scores[ind] -= nomarkscore
                else:
                    self.answer_scores[ind] -= markscore

            return True

        while True:
            await self.wait_for('message', check=is_scores_updated)
            self.update_event.set()

class Bot(discord.Client):

    def __init__(self, answer_scores):
        super().__init__()
        self.bot_channel_id_list = []
        self.embed_msg = None
        self.embed_channel_id = None
        #global wrong
        self.answer_scores = answer_scores

        # embed creation
        #don't edit here
        self.embed=discord.Embed(title="HQ TRIVIA",description =f"**__AG__**\n\n  `Confirmed Answer!!`",colour=0xFBC0AC)
        self.embed.add_field(name=f"**[0ption 1]({g})**", value=f"[0]({g})", inline=False)
        self.embed.add_field(name=f"**[0ption 2]({g})**", value=f"[0]({g})", inline=False)
        self.embed.add_field(name=f"**[0ption 3]({g})**", value=f"[0]({g})", inline=False)
        #self.embed.set_field(name="Best Answer :", value=best_answer)
        self.embed.set_footer(text='Bot Status : Connected')
        self.embed.add_field(name=f"**[Erased 0ption]({g})**", value="0", inline=False) 


        #await self.bot.add_reaction(embed,':spy:')


    async def clear_results(self):
        for i in range(len(self.answer_scores)):
            self.answer_scores[i]=0

    async def update_embeds(self):
      #  global wrong

         

        one_check = ""
        two_check = ""
        three_check = ""
        not_answer = "?"
        

        lst_scores = list(self.answer_scores)
        

        highest = max(lst_scores)
        gif_ans = 'https://cdn.discordapp.com/attachments/716879425655799858/726460742924107897/unnamed.gif'
        not_answer = ' '
        lowest = min(lst_scores)
        answer = lst_scores.index(highest)+1
        #best_answer= "⚠️"
        #global wrong             

        if highest > 0:
            if answer == 1:
                one_check = "** **✅** **"
                best_answer = ":one: <a:cit:764855340214779914>"
                gif_ans = "https://cdn.discordapp.com/attachments/725037079402119378/725037155298181160/709972997422841856.png"
            else:
                one_check = "❌ "
                not_answer = " Option:- 1<:emoji_53:703553522943393792>  "
                

            if answer == 2:
                two_check = "** **✅** **"
                best_answer = ":two:<a:cit:764855340214779914>"
                gif_ans = "https://cdn.discordapp.com/attachments/725037079402119378/725037208624693278/709972999280787516.png"
            else:
                two_check = "❌"
                not_answer = " Option:- 2<:emoji_53:703553522943393792>  "
                

            if answer == 3:
                three_check = "** **✅** **"
                best_answer = ":three: <a:cit:764855340214779914>"
                gif_ans = "https://cdn.discordapp.com/attachments/725037079402119378/725037316766433344/709973000195145728.png"
            else:
                three_check = "❌"
                not_answer = " Option:- 3<:emoji_53:703553522943393792>  "
                
     

            

        #if lowest < 0:
           # if answer == 2:
             #   one_cheak = ":x:"
          #  if answer == 3:
         #       two_cheak = ":x:"
       #     if answer == 1:
         #       three_cheak = ":x:"
          #only edit here
        self.embed=discord.Embed(title="** ALL IN ONE Crowd Searching<a:OP_Google:716229760883228733>**",description =f"**__Answer ❶__\n** [{lst_scores[0]}]({g}){one_check}\n**__Answer ❷__\n** [{lst_scores[1]}]({g}){two_check}\n**__Answer ❸__\n** [{lst_scores[2]}]({g}){three_check}",color=0x000000)
        #self.embed.set_field_at(0, name="**[0ption 1]({g})**", value=f"[➤{lst_scores[0]}]({g}){one_check}")
        #self.embed.set_field_at(1, name="**[0ption 2]({g})**", value=f"[➤{lst_scores[1]}]({g}){two_check}")
        #self.embed.set_field_at(2, name="**[0ption 3]({g})**", value=f"[➤{lst_scores[2]}]({g}){three_check}")
        self.embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/718842902205300847/750673733915639848/749914188742393876.gif")
        
        self.embed.set_footer(text='Answer status : connected')
        #self.embed.set_field_at(3, name="**[Erased Option]({g})**", value=not_answer, inline=True) 


        if self.embed_msg is not None:
            await self.embed_msg.edit(embed=self.embed)

    async def on_ready(self):
        print("==============")
        print("🎭Trivia H@çks||Official🎭")
        print("Connected to discord.")
        print("User: " + self.user.name)
        print("ID: " + str(self.user.id))
        log=self.get_channel(768713317224677407)
        await log.send("> **HQ BOT Is Updated** ✅")

        await self.clear_results()
        await self.update_embeds()
        await self.change_presence(activity=discord.Game(name='with '+str(len(set(self.get_all_members())))+' users'))
        await self.change_presence(activity=discord.Activity(type=1,name="HQ BOT 🇺🇸!!"))

    async def on_message(self, message):


        # if message is private
        if message.author == self.user or message.guild == None:
            return

        if message.content.lower() == "dj":
            await message.delete()
            
            self.embed_msg = None
            await self.clear_results()
            await self.update_embeds()
            self.embed_msg = \
                await message.channel.send('',embed=self.embed)
            #await self.embed_msg.add_reaction("✅")
            await self.embed_msg.add_reaction("👌")
            self.embed_channel_id = message.channel.id
       

          

        # process votes
        if message.channel.id == self.embed_channel_id:
            content = message.content.replace(' ', '').replace("'", "")
            updated = await update_scores(content, self.answer_scores)
            if updated:
                await self.update_embeds()

def bot_with_cyclic_update_process(update_event, answer_scores):

    def cyclic_update(bot, update_event):
        f = asyncio.run_coroutine_threadsafe(bot.update_embeds(), bot.loop)
        while True:
            update_event.wait()
            update_event.clear()
            f.cancel()
            f = asyncio.run_coroutine_threadsafe(bot.update_embeds(), bot.loop)
            #res = f.result()

    bot = Bot(answer_scores)

    upd_thread = threading.Thread(target=cyclic_update, args=(bot, update_event))
    upd_thread.start()

    loop = asyncio.get_event_loop()
    loop.create_task(bot.start('NzY4NzYyNTM4ODgzMTUzOTIw.X5FL6A.Af9TAHgUcMG6LASLjWKfCVwfm6Q'))
    loop.run_forever()


def selfbot_process(update_event, answer_scores):

    selfbot = SelfBot(update_event, answer_scores)

    loop = asyncio.get_event_loop()
    loop.create_task(selfbot.start('NzY5MDY0NjkyMDM1MzU0NjM0.X5KBRg.qfJZwobU4iPTCzRVI6vhy7II4b0 ',
                                   bot=False))
    loop.run_forever()

if __name__ == '__main__':

    # running bot and selfbot in separate OS processes

    # shared event for embed update
    update_event = multiprocessing.Event()

    # shared array with answer results
    answer_scores = multiprocessing.Array(typecode_or_type='i', size_or_initializer=4)

    p_bot = multiprocessing.Process(target=bot_with_cyclic_update_process, args=(update_event, answer_scores))
    p_selfbot = multiprocessing.Process(target=selfbot_process, args=(update_event, answer_scores))

    p_bot.start()
    p_selfbot.start()

    p_bot.join()
    p_selfbot.join()




 
 
